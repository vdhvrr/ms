version: "3.9"
services:
  resource-service:
    build:
      context: ./resource-service
      dockerfile: ./Dockerfile
    ports:
      - "${RESOURCE_SERVICE_PORT}:${RESOURCE_SERVICE_PORT}"
    environment:
      RABBITMQ_HOST: rabbitmq
      DB_HOST: postgresqldb
      S3_HOST: ninja
      S3_PORT: 9000
      EUREKA_ZONE: http://eureka:8761/eureka
      API_GATEWAY: api-gateway
    depends_on:
      - resource-processor
      - rabbitmq
      - postgresqldb
      - ninja
      - eureka
    labels:
      collect_logs_with_filebeat: "true"
  song-service:
    build:
      context: ./song-service
      dockerfile: ./Dockerfile
    ports:
      - "${SONG_SERVICE_PORT}:${SONG_SERVICE_PORT}"
    environment:
      DB_HOST: postgresqldb
      EUREKA_ZONE: http://eureka:8761/eureka
    depends_on:
      - postgresqldb
      - eureka
    labels:
      collect_logs_with_filebeat: "true"
  storage-service:
    build:
      context: ./storage-service
      dockerfile: ./Dockerfile
    ports:
      - "${STORAGE_SERVICE_PORT}:${STORAGE_SERVICE_PORT}"
    environment:
      DB_HOST: postgresqldb
      EUREKA_ZONE: http://eureka:8761/eureka
    depends_on:
      - postgresqldb
      - eureka
    labels:
      collect_logs_with_filebeat: "true"
  resource-processor:
    build:
      context: ./resource-processor
      dockerfile: ./Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      EUREKA_ZONE: http://eureka:8761/eureka
    depends_on:
      - song-service
      - rabbitmq
      - api-gateway
    labels:
      collect_logs_with_filebeat: "true"
  postgresqldb:
    image: postgres
    build:
      context: ./
      dockerfile: Dockerfile.postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=admin
      - POSTGRES_USER=postgres
  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
  ninja:
    image: scireum/s3-ninja
    ports:
      - "9444:9000"
    tmpfs:
      - "/home/sirius/data/${BUCKET_NAME}/:uid=2000,gid=2000"
  eureka:
    build:
      context: ./eureka-server/.
      dockerfile: ./Dockerfile
    ports:
      - "8761:8761"
  api-gateway:
    build:
      context: ./api-gateway/.
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
    environment:
      EUREKA_ZONE: http://eureka:8761/eureka
      KIBANA: http://kibana:5601
    depends_on:
      - eureka
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data:rw              # Persistence data
  logstash:
    image: docker.elastic.co/logstash/logstash:7.2.0
    ports:
      - "25826:25826"
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro                # Pipeline configuration
    restart: on-failure
    depends_on:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:7.2.0
    ports:
      - "5601:5601"
    restart: on-failure
    depends_on:
      - elasticsearch
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.2.0
    command: filebeat -e -strict.perms=false
    volumes:
      - ./filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file
      - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs
      - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers
      - ./filebeat/data:/usr/share/filebeat/data:rw                        # Persistence data
    user: root                                                             # Allow access to log files and docker.sock
    restart: on-failure
    depends_on:
      - logstash